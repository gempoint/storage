{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;AAAA,MAAqB,OAAO;IAA5B;QACU,QAAG,GAAsB,EAAE,CAAA;IA2BrC,CAAC;IAzBC,MAAM,CAAC,GAAW,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC;IAE5C,MAAM,CAAC,GAAW,EAAE,GAAM;QACxB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;IACtB,CAAC;IAED,GAAG,CAAC,GAAW,IAAmB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC;IAExD,MAAM,CAAC,GAAsB;QAC3B,IAAI,MAAM,GAAqB;YAC7B,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,EAAE;SACV,CAAA;QACD,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;YACxB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAA;YACvB,IAAI,IAAI,EAAE;gBACR,MAAM,CAAC,KAAK,EAAE,CAAA;gBACd,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;aACxB;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,SAAS,KAAK,IAAI,CAAC,GAAG,GAAG,EAAE,CAAA,CAAC,CAAC;CAC9B;AA5BD,0BA4BC;AAED,MAAa,YAAY;IAAzB;QACU,SAAI,GAAqC,EAAE,CAAA;IAWrD,CAAC;IATC,UAAU,CAAI,GAAW;QACvB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,OAAO,EAAK,CAAA;IACnC,CAAC;IAED,MAAM,CAAC,GAAW,IAAkC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC;IAE3E,MAAM,CAAC,GAAW,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC;IAE7C,SAAS,KAAK,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA,CAAC,CAAC;CAC/B;AAZD,oCAYC","sourcesContent":["export default class Storage<T> {\n  private dat: Record<string, T> = {}\n\n  delete(key: string) { delete this.dat[key] }\n\n  create(key: string, dat: T) {\n    this.dat[key] = dat;\n  }\n\n  get(key: string): T | undefined { return this.dat[key] }\n\n  filter(dat: (x: T) => boolean) {\n    let result: FilterResults<T> = {\n      count: 0,\n      items: {}\n    }\n    for (const y in this.dat) {\n      const value = this.dat[y];\n      const test = dat(value)\n      if (test) {\n        result.count++\n        result.items[y] = value\n      }\n    }\n    return result;\n  }\n\n  deleteAll() { this.dat = {} }\n}\n\nexport class MultiStorage {\n  private dats: Record<string, Storage<unknown>> = {}\n\n  newStorage<T>(key: string) {\n    this.dats[key] = new Storage<T>()\n  }\n\n  access(key: string): Storage<unknown> | undefined { return this.dats[key] }\n\n  delete(key: string) { delete this.dats[key] }\n\n  deleteAll() { this.dats = {} }\n}\n\nexport interface FilterResults<T> {\n  count: number\n  items: { [x: string]: T }\n}"]}